{"version":3,"file":"reactrouterv6.js","sources":["../../src/reactrouterv6.tsx"],"sourcesContent":["// Inspired from Donnie McNeal's solution:\n// https://gist.github.com/wontondon/e8c4bdf2888875e4c755712e99279536\n\nimport { Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport React from 'react';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Action, Location } from './types';\n\ninterface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n}\n\ntype Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\ninterface RouteMatch<ParamKey extends string = string> {\n  params: Params<ParamKey>;\n  pathname: string;\n  route: RouteObject;\n}\n\ntype UseEffect = (cb: () => void, deps: unknown[]) => void;\ntype UseLocation = () => Location;\ntype UseNavigationType = () => Action;\ntype CreateRoutesFromChildren = (children: JSX.Element[]) => RouteObject[];\ntype MatchRoutes = (routes: RouteObject[], location: Location) => RouteMatch[] | null;\n\nlet activeTransaction: Transaction | undefined;\n\nlet _useEffect: UseEffect;\nlet _useLocation: UseLocation;\nlet _useNavigationType: UseNavigationType;\nlet _createRoutesFromChildren: CreateRoutesFromChildren;\nlet _matchRoutes: MatchRoutes;\nlet _customStartTransaction: (context: TransactionContext) => Transaction | undefined;\nlet _startTransactionOnLocationChange: boolean;\n\nconst global = getGlobalObject<Window>();\n\nconst SENTRY_TAGS = {\n  'routing.instrumentation': 'react-router-v6',\n};\n\nfunction getInitPathName(): string | undefined {\n  if (global && global.location) {\n    return global.location.pathname;\n  }\n\n  return undefined;\n}\n\nexport function reactRouterV6Instrumentation(\n  useEffect: UseEffect,\n  useLocation: UseLocation,\n  useNavigationType: UseNavigationType,\n  createRoutesFromChildren: CreateRoutesFromChildren,\n  matchRoutes: MatchRoutes,\n) {\n  return (\n    customStartTransaction: (context: TransactionContext) => Transaction | undefined,\n    startTransactionOnPageLoad = true,\n    startTransactionOnLocationChange = true,\n  ): void => {\n    const initPathName = getInitPathName();\n    if (startTransactionOnPageLoad && initPathName) {\n      activeTransaction = customStartTransaction({\n        name: initPathName,\n        op: 'pageload',\n        tags: SENTRY_TAGS,\n      });\n    }\n\n    _useEffect = useEffect;\n    _useLocation = useLocation;\n    _useNavigationType = useNavigationType;\n    _matchRoutes = matchRoutes;\n    _createRoutesFromChildren = createRoutesFromChildren;\n\n    _customStartTransaction = customStartTransaction;\n    _startTransactionOnLocationChange = startTransactionOnLocationChange;\n  };\n}\n\nconst getTransactionName = (routes: RouteObject[], location: Location, matchRoutes: MatchRoutes): string => {\n  if (!routes || routes.length === 0 || !matchRoutes) {\n    return location.pathname;\n  }\n\n  const branches = matchRoutes(routes, location);\n\n  if (branches) {\n    // eslint-disable-next-line @typescript-eslint/prefer-for-of\n    for (let x = 0; x < branches.length; x++) {\n      if (branches[x].route && branches[x].route.path && branches[x].pathname === location.pathname) {\n        return branches[x].route.path || location.pathname;\n      }\n    }\n  }\n\n  return location.pathname;\n};\n\nexport function withSentryReactRouterV6Routing<P extends Record<string, any>, R extends React.FC<P>>(Routes: R): R {\n  if (\n    !_useEffect ||\n    !_useLocation ||\n    !_useNavigationType ||\n    !_createRoutesFromChildren ||\n    !_matchRoutes ||\n    !_customStartTransaction\n  ) {\n    IS_DEBUG_BUILD &&\n      logger.warn('reactRouterV6Instrumentation was unable to wrap Routes because of one or more missing parameters.');\n\n    return Routes;\n  }\n\n  let isBaseLocation: boolean = false;\n  let routes: RouteObject[];\n\n  const SentryRoutes: React.FC<P> = (props: P) => {\n    const location = _useLocation();\n    const navigationType = _useNavigationType();\n\n    _useEffect(() => {\n      // Performance concern:\n      // This is repeated when <Routes /> is rendered.\n      routes = _createRoutesFromChildren(props.children);\n      isBaseLocation = true;\n\n      if (activeTransaction) {\n        activeTransaction.setName(getTransactionName(routes, location, _matchRoutes));\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.children]);\n\n    _useEffect(() => {\n      if (isBaseLocation) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        return;\n      }\n\n      if (_startTransactionOnLocationChange && (navigationType === 'PUSH' || navigationType === 'POP')) {\n        if (activeTransaction) {\n          activeTransaction.finish();\n        }\n\n        activeTransaction = _customStartTransaction({\n          name: getTransactionName(routes, location, _matchRoutes),\n          op: 'navigation',\n          tags: SENTRY_TAGS,\n        });\n      }\n    }, [props.children, location, navigationType, isBaseLocation]);\n\n    isBaseLocation = false;\n\n    // @ts-ignore Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n    return <Routes {...props} />;\n  };\n\n  hoistNonReactStatics(SentryRoutes, Routes);\n\n  // @ts-ignore Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n  return SentryRoutes;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;AAmCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;AAMA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;AAEA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA;;;"}